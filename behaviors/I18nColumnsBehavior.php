<?php

/**
 * I18nColumnsBehavior
 *
 * @uses CActiveRecordBehavior
 * @license MIT
 * @author See https://github.com/neam/yii-i18n-columns/graphs/contributors
 */
class I18nColumnsBehavior extends CActiveRecordBehavior
{

    /**
     * @var array list of attributes to translate
     */
    public $translationAttributes = array();

    /**
     * @var array list of the relation names corresponding to translated attributes that are foreign keys
     */
    public $multilingualRelations = array();

    /**
     * Make translated attributes readable without requiring suffix
     */
    public function __get($name)
    {
        if (!in_array($name, $this->translationAttributes) && !in_array($name, array_keys($this->multilingualRelations))) {
            return parent::__get($name);
        }

        $translatedAttribute = $name . '_' . Yii::app()->language;
        if (array_key_exists($translatedAttribute, $this->owner->attributes)) {
            return $this->owner->$translatedAttribute;
        }

        $translatedRelation = $this->generateRelationName($this->multilingualRelations[$name] . '_' . Yii::app()->language);
        if (array_key_exists($translatedRelation, $this->owner->relations())) {
            return $this->owner->$translatedRelation;
        }

        return parent::__get($name);
    }

    /**
     * Make translated attributes writeable without requiring suffix
     */
    public function __set($name, $value)
    {
        if (!in_array($name, $this->translationAttributes) && !in_array($name, array_keys($this->multilingualRelations))) {
            return parent::__set($name, $value);
        }

        $translatedAttribute = $name . '_' . Yii::app()->language;
        if (array_key_exists($translatedAttribute, $this->owner->attributes)) {
            $this->owner->$translatedAttribute = $value;
            return;
        }

        $translatedRelation = $this->generateRelationName($this->multilingualRelations[$name] . '_' . Yii::app()->language);
        if (array_key_exists($translatedRelation, $this->owner->attributes)) {
            $this->owner->$translatedRelation = $value;
            return;
        }

    }

    /**
     * Helper. Returns an array with all columns that this attribute is stored in
     * @param $attribute
     * @return array
     */
    static public function attributeColumns($attribute)
    {
        $columns = array();
        foreach (Yii::app()->multilingual->languages as $lang) {
            $columns[] = $attribute . "_" . $lang;
        }
        return $columns;
    }

    /**
     * Transforms the translationAttributes into corresponding relation properties
     * as would be generated by Gii. Used as default configuration for relationProperties
     * @return array
     */
    private function getTranslationFks()
    {
        $relationProperties = array();
        foreach ($this->translationAttributes as $attribute) {
            $relationName = $this->generateRelationName($attribute, false);
            $relationProperties[] = $relationName;
        }
        return $relationProperties;
    }

    /**
     * Expose translatable attributes as readable
     */
    public function canGetProperty($name)
    {
        return in_array($name, $this->translationAttributes) || in_array($name, array_keys($this->multilingualRelations)) ? true : parent::canGetProperty($name);
    }

    /**
     * Expose translatable attributes as writeable
     */
    public function canSetProperty($name)
    {
        return in_array($name, $this->translationAttributes) || in_array($name, array_keys($this->multilingualRelations)) ? true : parent::canSetProperty($name);
    }

    /**
     * Mark the multilingual attributes as safe, so that forms that rely
     * on setting attributes from post values works without modification.
     *
     * @param CActiveRecord $owner
     * @throws Exception
     */
    public function attach($owner)
    {
        parent::attach($owner);
        if (!($owner instanceof CActiveRecord)) {
            throw new Exception('Owner must be a CActiveRecord class');
        }

        $validators = $owner->getValidatorList();

        foreach ($this->translationAttributes as $name) {
            $validators->add(CValidator::createValidator('safe', $owner, $name, array()));
        }
    }

    /**
     * Generate a name for use as a relation name (inside relations() function in a model).
     * Adapted from system.gii.generators.models.ModelCode
     * @param string the foreign key name
     * @param boolean whether the relation would contain multiple objects
     * @return string the relation name
     */
    protected function generateRelationName($fkName, $multiple = false)
    {
        if (strcasecmp(substr($fkName, -2), 'id') === 0 && strcasecmp($fkName, 'id')) {
            $relationName = rtrim(substr($fkName, 0, -2), '_');
        } else {
            $relationName = $fkName;
        }
        $relationName[0] = strtolower($relationName);

        if ($multiple) {
            $relationName = $this->pluralize($relationName);
        }

        $names = preg_split('/_+/', $relationName, -1, PREG_SPLIT_NO_EMPTY);
        if (empty($names)) {
            return $relationName;
        } // unlikely
        for ($name = $names[0], $i = 1; $i < count($names); ++$i) {
            $name .= ucfirst($names[$i]);
        }

        return $name;
    }

}
